name: Release

on:
  workflow_dispatch:
    inputs:
      release_level:
        description: "Version bump to pass to cargo-release (patch, minor, major, rc, etc.)"
        required: true
        default: patch

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-release
        run: cargo install cargo-release --locked

      - name: Configure git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

      - name: Run tests
        run: cargo test --locked

      - name: Run cargo release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo release ${{ github.event.inputs.release_level }} --execute --no-dev-version --no-publish

      - name: Determine release version
        id: version
        run: |
          VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name=="dbt-lint-yaml") | .version')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Build release binary
        run: cargo build --release --locked

      - name: Package artifacts
        run: |
          VERSION=${{ steps.version.outputs.version }}
          mkdir -p dist
          cp target/release/dbt-lint-yaml dist/dbt-lint-yaml
          tar -C dist -czf dbt-lint-yaml-${VERSION}-linux-x86_64.tar.gz dbt-lint-yaml
          rm dist/dbt-lint-yaml
          echo "artifact=dbt-lint-yaml-${VERSION}-linux-x86_64.tar.gz" >> "$GITHUB_ENV"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          files: ${{ env.artifact }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
